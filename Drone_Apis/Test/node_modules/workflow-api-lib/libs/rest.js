'use strict';

var querystring = require('querystring'),
	debug = require('debug')('workflow-api-lib:rest'),
	http = require('http'),
	https = require('https'),
	timeout = 3000;

function rest() {

	return /** @lends libs/rest.prototype */ {

		headers: {
			'Cache-Control': 'no-cache',
			'Content-Type': 'application/json;charset=UTF-8'
		},

		init: function(opts) {
			this.host = opts.host;
			this.port = opts.port;
			this.secure = opts.secure;
			return this;
		},

		request: function(method, path, query, data, callback) {

			if (Object.keys(query).length) {
				path += (path.indexOf('?') === -1 ? '?' : '&') + querystring.stringify(query);
			}

			if (method === 'GET' && Object.keys(data).length) {
				path += (path.indexOf('?') === -1 ? '?' : '&') + querystring.stringify(data);
			}

			var server, req,
				options = {
					host: this.host,
					port: this.port,
					headers: this.headers,
					method: method,
					path: path
				};

			if (this.secure !== undefined) {
				server = this.secure ? https : http;
			} else {
				server = http;
			}

			options.scheme = (server === https  ? 'HTTPS' : 'HTTP');

			debug('options -> %s', JSON.stringify(options, null, 2));
			debug('data -> %s', JSON.stringify(data, null, 2));

			req = server.request(options, function(res) {
				var responseString = '';
				res.setEncoding('utf-8');

				res.on('data', function(data) {
					responseString += data;
				});

				res.on('end', function() {
					try {
						callback(null, JSON.parse(responseString), req, res);
					} catch (e) {
						callback(null, responseString, req, res);
					}
				});
			});

			req.on('socket', function (socket) {
				socket.setTimeout(timeout);
				socket.on('timeout', function() {
					req.abort();
				});
			});

			req.on('error', function(err) {
				console.error('error - %s', err);
				callback(err, null, req, {statusCode: 500, message: 'Internal Server Error', err: err});
			});

			if (method !== 'GET') {
				var content = data ? JSON.stringify(data) : '';
				this.headers['Content-Length'] = content.length;
				req.write(content);
			}

			req.end();
		}
	};
}

module.exports = rest;